import type { ObjectId } from 'mongodb'

/**
 * Определяет причину, по которой сработал репрайсер.
 * Используется для логирования и передачи состояния между воркерами.
 */
export type ChangeTriggerType = 'EXTERNAL_INTERFERENCE' | 'MARKET_FLUCTUATION' | 'RULE_UPDATE'

/**
 * Структура документа MongoDB для коллекции dynamicWBData.
 * Каждый документ представляет один товар (nmId).
 */
export interface DynamicWBDataDocument {
    _id?: ObjectId // ID документа в MongoDB (генерируется автоматически)
    nmId: number // Артикул WB (nmID). Это будет основной бизнес-ключ, должен быть уникальным и индексированным.

    // --- Временные метки для отслеживания свежести данных и управления воркером ---
    lastUpdatedAt: Date // Общее время последнего обновления этого документа в MongoDB.
    cardUpdatedAt?: Date // Оригинальное время обновления карточки из API WB (Этап 1, поле updatedAt из ответа API). Используется для логики курсора на Этапе 1.
    cardDataFetchedAt?: Date // Когда данные карточки от поставщика (Этап 1) были в последний раз загружены.
    priceDataFetchedAt?: Date // Когда данные о ценах поставщика (Этап 2) были в последний раз загружены.
    siteDataFetchedAt?: Date // Когда данные с сайта WB (Этап 3) были в последний раз загружены.

    // --- Основные данные о товаре (обновляются воркером, приоритет у данных с сайта WB (Этап 3), если доступны) ---
    title?: string // Название товара.
    brand?: string // Бренд товара.
    vendorCode?: string // Артикул поставщика (может отличаться от nmId, из карточки Этап 1).

    // --- Идентификатор поставщика ---
    supplierId?: number // Идентификатор поставщика (legacySupplierId из старой системы или другой ID)

    // --- Физические характеристики и медиа (из карточки, Этап 1) ---
    dimensions?: {
        length: number // Длина в мм
        width: number // Ширина в мм
        height: number // Высота в мм
    }
    photos?: {
        thumbnail: string // URL маленького изображения
        medium: string // URL среднего изображения
        // Можно добавить и другие размеры, если необходимо
    }

    // --- Информация о ценах от поставщика (Этап 2) ---
    supplierDiscount?: number // Общая скидка поставщика в % на весь nmID.

    // --- Агрегированная информация с сайта WB (Этап 3) ---
    siteTotalQuantity?: number // Общее количество остатков товара на сайте WB по всем размерам.

    // --- Поля для быстрой сортировки/фильтрации (денормализованные данные) ---
    firstSizeSitePrice?: number // Цена для покупателя на сайте WB для первого размера.
    firstSizeSpp?: number // СПП (Скидка Постоянного Покупателя) в % на сайте WB для первого размера.

    // --- Детализация по размерам ---
    sizes: Array<{
        chrtId: number // ID размера.
        techSize: string // Технический размер.
        wbSize?: string // Размер WB.
        skus?: string[] // Массив баркодов (SKU).

        // Цены от поставщика для этого размера
        supplierPrice?: number // Цена поставщика до общей скидки на nmID
        supplierDiscountedPrice?: number // Цена поставщика ПОСЛЕ общей скидки на nmID

        // Данные с сайта WB для этого размера
        sitePrice?: number // Финальная цена для покупателя на сайте WB
        siteSpp?: number // СПП (Скидка Постоянного Покупателя) в % на сайте WB
        siteStocks?: Array<{
            warehouseId: number // ID склада WB
            quantity: number // Количество на складе WB
        }>
    }>

    // Технические поля
    createdAt?: Date // Дата создания документа (добавляется автоматически при upsert)
    priceStateLastChangedAt?: Date // Время, когда было зафиксировано последнее изменение цены

    /**
     * Определяет причину последнего изменения цены,
     * чтобы воркер-слушатель мог на нее отреагировать без дополнительных запросов.
     * Устанавливается в `product-aggregator-worker`.
     */
    lastChangeTrigger?: ChangeTriggerType | null
}
